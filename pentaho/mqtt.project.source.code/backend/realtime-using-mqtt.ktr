<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>realtime-using-mqtt</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>&#x2f;</directory>
    <parameters>
        <parameter>
            <name>aggTransName</name>
            <default_value>ktr_transform.ktr</default_value>
            <description>The name of the subtransformation to be used to process rows. </description>
        </parameter>
        <parameter>
            <name>numberOfRows</name>
            <default_value>2000</default_value>
            <description>Number of rows to send to the subtrabnsformation, &#x3c;&#x3d;1 the child transformation will not be called&#xa;Parameter	Default Value	Description&#xa;numberOfRows	1	Refresh Rate &#x28;miliseconds&#x29;&#xa;te &#x28;miliseconds&#x29;</description>
        </parameter>
        <parameter>
            <name>pubBroker</name>
            <default_value>tcp&#x3a;&#x2f;&#x2f;192.168.99.100&#x3a;1883</default_value>
            <description>Broker for the publisher to connect. </description>
        </parameter>
        <parameter>
            <name>pubClientID</name>
            <default_value>dest-e6679942</default_value>
            <description>Client ID for publisher.</description>
        </parameter>
        <parameter>
            <name>pubTopic</name>
            <default_value>pdiprocesseddatastream</default_value>
            <description>Topic to be used by publisher.</description>
        </parameter>
        <parameter>
            <name>subBroker</name>
            <default_value>tcp&#x3a;&#x2f;&#x2f;192.168.99.100&#x3a;1883</default_value>
            <description>Broker for the subscriber to connect. </description>
        </parameter>
        <parameter>
            <name>subClientID</name>
            <default_value>origin-e6679942</default_value>
            <description>Client ID for subscriber.</description>
        </parameter>
        <parameter>
            <name>subTopic</name>
            <default_value>iotdevices</default_value>
            <description>Topic to be used by subscriber.</description>
        </parameter>
        <parameter>
            <name>timeWaiting</name>
            <default_value>1000</default_value>
            <description>Time waiting for rows in milliseconds.</description>
        </parameter>
    </parameters>
    <log>
<trans-log-table><connection/>
<schema/>
<table/>
<size_limit_lines/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STATUS</id><enabled>Y</enabled><name>STATUS</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name><subject/></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name><subject/></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name><subject/></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name><subject/></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name><subject/></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name><subject/></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>STARTDATE</id><enabled>Y</enabled><name>STARTDATE</name></field><field><id>ENDDATE</id><enabled>Y</enabled><name>ENDDATE</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>DEPDATE</id><enabled>Y</enabled><name>DEPDATE</name></field><field><id>REPLAYDATE</id><enabled>Y</enabled><name>REPLAYDATE</name></field><field><id>LOG_FIELD</id><enabled>Y</enabled><name>LOG_FIELD</name></field><field><id>EXECUTING_SERVER</id><enabled>N</enabled><name>EXECUTING_SERVER</name></field><field><id>EXECUTING_USER</id><enabled>N</enabled><name>EXECUTING_USER</name></field><field><id>CLIENT</id><enabled>N</enabled><name>CLIENT</name></field></trans-log-table>
<perf-log-table><connection/>
<schema/>
<table/>
<interval/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>SEQ_NR</id><enabled>Y</enabled><name>SEQ_NR</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>INPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>INPUT_BUFFER_ROWS</name></field><field><id>OUTPUT_BUFFER_ROWS</id><enabled>Y</enabled><name>OUTPUT_BUFFER_ROWS</name></field></perf-log-table>
<channel-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>LOGGING_OBJECT_TYPE</id><enabled>Y</enabled><name>LOGGING_OBJECT_TYPE</name></field><field><id>OBJECT_NAME</id><enabled>Y</enabled><name>OBJECT_NAME</name></field><field><id>OBJECT_COPY</id><enabled>Y</enabled><name>OBJECT_COPY</name></field><field><id>REPOSITORY_DIRECTORY</id><enabled>Y</enabled><name>REPOSITORY_DIRECTORY</name></field><field><id>FILENAME</id><enabled>Y</enabled><name>FILENAME</name></field><field><id>OBJECT_ID</id><enabled>Y</enabled><name>OBJECT_ID</name></field><field><id>OBJECT_REVISION</id><enabled>Y</enabled><name>OBJECT_REVISION</name></field><field><id>PARENT_CHANNEL_ID</id><enabled>Y</enabled><name>PARENT_CHANNEL_ID</name></field><field><id>ROOT_CHANNEL_ID</id><enabled>Y</enabled><name>ROOT_CHANNEL_ID</name></field></channel-log-table>
<step-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>TRANSNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>STEPNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>STEP_COPY</id><enabled>Y</enabled><name>STEP_COPY</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field></step-log-table>
<metrics-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>METRICS_DATE</id><enabled>Y</enabled><name>METRICS_DATE</name></field><field><id>METRICS_CODE</id><enabled>Y</enabled><name>METRICS_CODE</name></field><field><id>METRICS_DESCRIPTION</id><enabled>Y</enabled><name>METRICS_DESCRIPTION</name></field><field><id>METRICS_SUBJECT</id><enabled>Y</enabled><name>METRICS_SUBJECT</name></field><field><id>METRICS_TYPE</id><enabled>Y</enabled><name>METRICS_TYPE</name></field><field><id>METRICS_VALUE</id><enabled>Y</enabled><name>METRICS_VALUE</name></field></metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <created_user/>
  <created_date>2015&#x2f;11&#x2f;29 22&#x3a;22&#x3a;27.292</created_date>
  <modified_user>-</modified_user>
  <modified_date>2010&#x2f;09&#x2f;30 20&#x3a;22&#x3a;22.679</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA&#x3d;</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
    <notepad>
      <note>The input step is a UDJC that consumes messages from a MQTT message broker&#x2f;topic.&#xa;As soon as the messages arrive and depending on the number of rows to be processed bu the child transformation,&#xa;they will be processed and sent again to the message broker.  &#xa;&#xa;You can pass the name of the transformation to be executed as a parameter. &#xa;The name of the parameter is&#x3a; transformationName&#xa;&#xa;After every X rows the job will be executed and these X rows will be passed to the transformation &#xa;The name of the parameter to set this value is&#x3a; numberOfRows&#xa;</note>
      <xloc>29</xloc>
      <yloc>27</yloc>
      <width>723</width>
      <heigth>170</heigth>
      <fontname>.Helvetica Neue DeskInterface</fontname>
      <fontsize>13</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <connection>
    <name>AgileBI</name>
    <server>localhost</server>
    <type>MONETDB</type>
    <access>Native</access>
    <database>pentaho-instaview</database>
    <port>50000</port>
    <username>monetdb</username>
    <password>Encrypted 2be98afc86aa7f2e4cb14a17edb86abd8</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <read_only>true</read_only>
    <attributes>
      <attribute><code>EXTRA_OPTION_INFOBRIGHT.characterEncoding</code><attribute>UTF-8</attribute></attribute>
      <attribute><code>EXTRA_OPTION_MYSQL.defaultFetchSize</code><attribute>500</attribute></attribute>
      <attribute><code>EXTRA_OPTION_MYSQL.useCursorFetch</code><attribute>true</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>50000</attribute></attribute>
      <attribute><code>PRESERVE_RESERVED_WORD_CASE</code><attribute>Y</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>Y</attribute></attribute>
      <attribute><code>SUPPORTS_TIMESTAMP_DATA_TYPE</code><attribute>Y</attribute></attribute>
    </attributes>
  </connection>
  <order>
  <hop> <from>add_steps</from><to>mqtt_producer</to><enabled>Y</enabled> </hop>
  <hop> <from>trans_group_rows</from><to>mqtt_producer</to><enabled>Y</enabled> </hop>
  <hop> <from>trans_group_time</from><to>mqtt_producer</to><enabled>Y</enabled> </hop>
  <hop> <from>mqtt_consumer_r</from><to>case</to><enabled>Y</enabled> </hop>
  <hop> <from>case</from><to>trans_group_rows</to><enabled>Y</enabled> </hop>
  <hop> <from>case</from><to>trans_group_time</to><enabled>Y</enabled> </hop>
  <hop> <from>case</from><to>add_steps</to><enabled>Y</enabled> </hop>
  </order>
  <step>
    <name>add_steps</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>336</xloc>
      <yloc>416</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>case</name>
    <type>SwitchCase</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
<fieldname>type</fieldname>
<use_contains>Y</use_contains>
<case_value_type>String</case_value_type>
<case_value_format/>
<case_value_decimal/>
<case_value_group/>
<default_target_step>add_steps</default_target_step>
<cases><case><value>ROWS</value>
<target_step>trans_group_rows</target_step>
</case><case><value>TIME</value>
<target_step>trans_group_time</target_step>
</case></cases>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>176</xloc>
      <yloc>320</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>mqtt_consumer_r</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>

    <definitions>
        <definition>
        <class_type>TRANSFORM_CLASS</class_type>

        <class_name>Processor</class_name>

        <class_source><![CDATA[import java.util.*;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import org.eclipse.paho.client.mqttv3.persist.MqttDefaultFilePersistence;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import java.util.UUID;


private boolean keepGoing = true;

private void logErrorMsg(int reason, String message, String locMessage, Throwable cause, MqttException ex) {
	logBasic("Reason: " + reason);
    logBasic("Message: " + message);
    logBasic("Loc: " + locMessage);
    logBasic("Cause: " + cause);
    logBasic("Exception: " + ex);
}


public class MqttClientSubscriber implements MqttCallback {

    private MqttClient client;

    private StepMetaInterface smi; 
    private StepDataInterface sdi;
	private Processor step;
	private UserDefinedJavaClassData data;
	
	String topic = getVariable("subTopic", "");
	String clientId = UUID.randomUUID().toString();
	String broker = getVariable("subBroker", "");
	String type = getVariable("rowsGroupingType", "");
	int qos = 0;
	boolean cleanSession = true;  

    public MqttClientSubscriber(StepMetaInterface smi, StepDataInterface sdi, Processor step, UserDefinedJavaClassData data) {
		this.smi = smi;
		this.sdi = sdi;
		this.step = step;
		this.data = data;
    }

    public void start() {
        try {
			String tmpDir = System.getProperty("java.io.tmpdir");
    		MqttDefaultFilePersistence dataStore = new MqttDefaultFilePersistence(tmpDir); 
			MqttConnectOptions conOpt = new MqttConnectOptions();
	    	conOpt.setCleanSession(cleanSession);
			client = new MqttClient(broker, clientId);
            client.connect(conOpt);
			client.setCallback(this);
            client.subscribe(topic, qos);
            step.logBasic("Connected...");
        } catch (MqttException me) {
			step.logErrorMsg(me.getReasonCode(), me.getMessage(), me.getLocalizedMessage(), me.getCause(), me);
            me.printStackTrace();
        }
    }

  	public void stop() {
        try {
            client.unsubscribe(topic);
            client.disconnect();
            client.close();
        } catch (MqttException me) {
            step.logBasic("reason "+me.getReasonCode());
            step.logBasic("msg "+me.getMessage());
            step.logBasic("loc "+me.getLocalizedMessage());
            step.logBasic("cause "+me.getCause());
            step.logBasic("excep "+me);
            me.printStackTrace();
        }
    }

    public void connectionLost(Throwable cause) {
        // TODO Auto-generated method stub
    }

    public void messageArrived(String topic, MqttMessage message) throws Exception {

			String time = new Date().toString();
			String messageStr = new String(message.getPayload());
			String messageQoS = new String("" + message.getQos());
			incrementLinesRead();
			try {
				Object[] newRow = RowDataUtil.allocateRowData(data.outputRowMeta.size());
				get(Fields.Out, "time").setValue(newRow, time);
				get(Fields.Out, "qos").setValue(newRow, messageQoS);
				get(Fields.Out, "topic").setValue(newRow, topic);
				get(Fields.Out, "message").setValue(newRow, messageStr);
				get(Fields.Out, "type").setValue(newRow, type);
				putRow(data.outputRowMeta, newRow);	
				newRow = null;		
			} catch (Exception e) {
            	e.printStackTrace();
        	}
			
			time = null;
			messageStr = null;
			messageQoS = null;
			
			
    }

    public void deliveryComplete(IMqttDeliveryToken token) {
        // TODO Auto-generated method stub
    }

}

MqttClientSubscriber client;

public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{
	if (first){
		first = false;
		MqttClientSubscriber client = new MqttClientSubscriber(smi, sdi, this, data);
		client.start();
	}

	return true;
}

]]></class_source>
        </definition>
    </definitions>
    <fields>
        <field>
        <field_name>qos</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
        <field>
        <field_name>topic</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
        <field>
        <field_name>message</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
        <field>
        <field_name>time</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
        <field>
        <field_name>type</field_name>

        <field_type>String</field_type>

        <field_length>-1</field_length>

        <field_precision>-1</field_precision>

        </field>
    </fields><clear_result_fields>N</clear_result_fields>
<info_steps></info_steps><target_steps></target_steps><usage_parameters></usage_parameters>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>64</xloc>
      <yloc>320</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>mqtt_producer</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>

    <definitions>
        <definition>
        <class_type>TRANSFORM_CLASS</class_type>

        <class_name>Processor</class_name>

        <class_source><![CDATA[import java.util.*;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
import org.eclipse.paho.client.mqttv3.persist.MqttDefaultFilePersistence;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import java.util.UUID;

private MemoryPersistence persistence = new MemoryPersistence();
private FieldHelper inputField = null;

private MqttClient mqttClientProducer;
private MqttConnectOptions connOpts;
private MqttMessage msg;
private String message;

private void logErrorMsg(int reason, String message, String locMessage, Throwable cause, MqttException ex) {
	logBasic("Reason: " + reason);
    logBasic("Message: " + message);
    logBasic("Loc: " + locMessage);
    logBasic("Cause: " + cause);
    logBasic("Exception: " + ex);
}

public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{
	Object[] row = getRow();
	String topic = getVariable("pubTopic", "");
	String clientId = UUID.randomUUID().toString();;
	String broker = getVariable("pubBroker", "");
	int outQos = 0;
	inputField = get(Fields.In, "message");
	if (row == null) {
		setOutputDone();
		try {
        	mqttClientProducer.disconnect();
			logBasic("Disconnected to: "+broker+" & Topic: "+topic);
		} catch(MqttException me) {
			logErrorMsg(me.getReasonCode(), me.getMessage(), me.getLocalizedMessage(), me.getCause(), me);
        	me.printStackTrace();
			return false;
    	} 
        return false;
    }
	
	if (first){
		first = false;
		try {
			mqttClientProducer = new MqttClient(broker, clientId, persistence);
        	connOpts = new MqttConnectOptions();
        	connOpts.setCleanSession(true);
        	mqttClientProducer.connect(connOpts);
			logBasic("Connected to: "+broker+" & Topic: "+topic);
		} catch(MqttException me) {
			logErrorMsg(me.getReasonCode(), me.getMessage(), me.getLocalizedMessage(), me.getCause(), me);
        	me.printStackTrace();
			return false;
    	} 
	}

	try {
		String message = new String(inputField.getString(row));
        MqttMessage msg = new MqttMessage(message.getBytes());
		msg.setQos(outQos);
		mqttClientProducer.publish(topic, msg);
	} catch(MqttException me) {
		logErrorMsg(me.getReasonCode(), me.getMessage(), me.getLocalizedMessage(), me.getCause(), me);
        me.printStackTrace();
		return false;
    } 

	return true;
}

]]></class_source>
        </definition>
    </definitions>
    <fields>
    </fields><clear_result_fields>N</clear_result_fields>
<info_steps></info_steps><target_steps></target_steps><usage_parameters></usage_parameters>     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>496</xloc>
      <yloc>320</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>trans_group_rows</name>
    <type>TransExecutor</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <specification_method>filename</specification_method>
    <trans_object_id/>
    <trans_name/>
    <filename>&#x24;&#x7b;Internal.Transformation.Filename.Directory&#x7d;&#x2f;&#x24;&#x7b;aggTransName&#x7d;</filename>
    <directory_path/>
    <group_size>&#x24;&#x7b;numberOfRows&#x7d;</group_size>
    <group_field/>
    <group_time/>
          <parameters>    <inherit_all_vars>Y</inherit_all_vars>
    </parameters>
    <execution_result_target_step>mqtt_producer</execution_result_target_step>
    <execution_time_field>ExecutionTime</execution_time_field>
    <execution_result_field>ExecutionResult</execution_result_field>
    <execution_errors_field>ExecutionNrErrors</execution_errors_field>
    <execution_lines_read_field>ExecutionLinesRead</execution_lines_read_field>
    <execution_lines_written_field>ExecutionLinesWritten</execution_lines_written_field>
    <execution_lines_input_field>ExecutionLinesInput</execution_lines_input_field>
    <execution_lines_output_field>ExecutionLinesOutput</execution_lines_output_field>
    <execution_lines_rejected_field>ExecutionLinesRejected</execution_lines_rejected_field>
    <execution_lines_updated_field>ExecutionLinesUpdated</execution_lines_updated_field>
    <execution_lines_deleted_field>ExecutionLinesDeleted</execution_lines_deleted_field>
    <execution_files_retrieved_field>ExecutionFilesRetrieved</execution_files_retrieved_field>
    <execution_exit_status_field>ExecutionExitStatus</execution_exit_status_field>
    <execution_log_text_field>ExecutionLogText</execution_log_text_field>
    <execution_log_channelid_field>ExecutionLogChannelId</execution_log_channelid_field>
    <result_rows_target_step>mqtt_producer</result_rows_target_step>
      <result_rows_field><name>message</name><type>String</type><length>-1</length><precision>-1</precision></result_rows_field>
    <result_files_target_step/>
    <result_files_file_name_field>FileName</result_files_file_name_field>
    <executors_output_step/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>336</xloc>
      <yloc>240</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>trans_group_time</name>
    <type>TransExecutor</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <specification_method>filename</specification_method>
    <trans_object_id/>
    <trans_name/>
    <filename>&#x24;&#x7b;Internal.Transformation.Filename.Directory&#x7d;&#x2f;&#x24;&#x7b;aggTransName&#x7d;</filename>
    <directory_path/>
    <group_size/>
    <group_field/>
    <group_time>&#x24;&#x7b;timeWaiting&#x7d;</group_time>
          <parameters>    <inherit_all_vars>Y</inherit_all_vars>
    </parameters>
    <execution_result_target_step>mqtt_producer</execution_result_target_step>
    <execution_time_field>ExecutionTime</execution_time_field>
    <execution_result_field>ExecutionResult</execution_result_field>
    <execution_errors_field>ExecutionNrErrors</execution_errors_field>
    <execution_lines_read_field>ExecutionLinesRead</execution_lines_read_field>
    <execution_lines_written_field>ExecutionLinesWritten</execution_lines_written_field>
    <execution_lines_input_field>ExecutionLinesInput</execution_lines_input_field>
    <execution_lines_output_field>ExecutionLinesOutput</execution_lines_output_field>
    <execution_lines_rejected_field>ExecutionLinesRejected</execution_lines_rejected_field>
    <execution_lines_updated_field>ExecutionLinesUpdated</execution_lines_updated_field>
    <execution_lines_deleted_field>ExecutionLinesDeleted</execution_lines_deleted_field>
    <execution_files_retrieved_field>ExecutionFilesRetrieved</execution_files_retrieved_field>
    <execution_exit_status_field>ExecutionExitStatus</execution_exit_status_field>
    <execution_log_text_field>ExecutionLogText</execution_log_text_field>
    <execution_log_channelid_field>ExecutionLogChannelId</execution_log_channelid_field>
    <result_rows_target_step>mqtt_producer</result_rows_target_step>
      <result_rows_field><name>message</name><type>String</type><length>-1</length><precision>-1</precision></result_rows_field>
    <result_files_target_step/>
    <result_files_file_name_field>FileName</result_files_file_name_field>
    <executors_output_step/>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>336</xloc>
      <yloc>320</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>

</transformation>
